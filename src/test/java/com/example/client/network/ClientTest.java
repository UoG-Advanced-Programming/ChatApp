package com.example.client.network;

// Import required classes for test implementation
import com.example.common.messages.TextMessage;
import com.example.common.messages.UserStatus;
import com.example.common.messages.UserUpdateMessage;
import com.example.common.users.User;
import com.example.common.chats.GroupChat;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.*;
import java.net.Socket;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Unit tests for Client class to verify message transmission,
 * user status updates, error handling, null message handling,
 * and resource cleanup.
 */
public class ClientTest {

    // Test client instance used for all test cases
    private TestClient client;

    // Writer used to capture output generated by the client during tests
    private StringWriter outputWriter;

    // User object representing the test user
    private User testUser;

    // GroupChat object representing the test chat group
    private GroupChat testChat;

    /**
     * Initializes the test environment before each test case.
     * Sets up test user, test chat, test client instance, and output writer.
     */
    @BeforeEach
    public void setUp() {
        // Create a test user with username "TestUser"
        testUser = new User("TestUser");

        // Create a test group chat named "TestChat"
        testChat = new GroupChat("TestChat");

        // Initialize StringWriter to capture client's output
        outputWriter = new StringWriter();

        // Wrap the StringWriter in a PrintWriter
        PrintWriter printWriter = new PrintWriter(outputWriter, true);

        // Create a test client instance targeting localhost
        client = new TestClient("localhost");

        // Set the client's output writer to the test PrintWriter
        client.setOut(printWriter);

        // Log test setup details
        System.out.println("Test setup completed at: " + getCurrentFormattedDateTime());
        System.out.println("Current User's Login: " + testUser.getUsername());
        System.out.println("Test user created with ID: " + testUser.getId());
        System.out.println("Test chat created with ID: " + testChat.getId());
    }

    /**
     * Verifies that a text message is correctly sent by the client
     * and that the output contains the expected content and identifiers.
     */
    @Test
    public void testSendMessage() {
        // Create a sample text message with test content
        TextMessage message = new TextMessage(testChat, testUser, "Hello, world!");

        // Log message creation details
        System.out.println("Test message created with:");
        System.out.println("  User ID: " + testUser.getId());
        System.out.println("  Chat ID: " + testChat.getId());
        System.out.println("  Content: Hello, world!");

        // Send the message using the client
        client.send(message);
        System.out.println("Message sent to client");

        // Capture and log client's output
        String output = outputWriter.toString().trim();
        System.out.println("Captured output from client:");
        System.out.println("-----------------------------------");
        System.out.println(output);
        System.out.println("-----------------------------------");

        // Log and verify output content
        System.out.println("Checking if output contains message content: " + output.contains("Hello, world!"));
        System.out.println("Checking if output contains user ID: " + output.contains(testUser.getId()));
        System.out.println("Checking if output contains chat ID: " + output.contains(testChat.getId()));

        // Assertions to verify message content and identifiers
        assertTrue(output.contains("Hello, world!"), "Message content should be in the output");
        assertTrue(output.contains(testUser.getId()), "User ID should be in the output");
        assertTrue(output.contains(testChat.getId()), "Chat ID should be in the output");

        // Log test completion
        System.out.println("testSendMessage test completed successfully");
    }

    /**
     * Verifies that a user status update message is sent correctly
     * and that the output reflects the updated status.
     */
    @Test
    public void testUserStatusUpdate() {
        // Log start of status update test
        System.out.println("Starting testUserStatusUpdate test");
        System.out.println("Current time: " + getCurrentFormattedDateTime());
        System.out.println("Current User's " + testUser.getUsername());

        // Create a status update message indicating ONLINE status
        UserUpdateMessage message = new UserUpdateMessage(testUser, UserStatus.ONLINE);

        // Log message creation details
        System.out.println("User update message created with:");
        System.out.println("  User ID: " + testUser.getId());
        System.out.println("  Username: " + testUser.getUsername());
        System.out.println("  Status: " + UserStatus.ONLINE);

        // Send the status update message using the client
        client.send(message);
        System.out.println("User status update message sent to client");

        // Capture and log client's output
        String output = outputWriter.toString().trim();
        System.out.println("Captured output from client:");
        System.out.println("-----------------------------------");
        System.out.println(output);
        System.out.println("-----------------------------------");

        // Log and verify output content
        System.out.println("Checking if output contains ONLINE status: " + output.contains("\"status\":\"ONLINE\""));
        System.out.println("Checking if output contains user ID: " + output.contains(testUser.getId()));

        // Assertions to verify status and user ID presence
        assertTrue(output.contains("\"status\":\"ONLINE\""), "Status should be ONLINE");
        assertTrue(output.contains(testUser.getId()), "User ID should be in the output");

        // Log test completion
        System.out.println("testUserStatusUpdate test completed successfully");
    }

    /**
     * Verifies that the client handles connection errors gracefully
     * and that exceptions are caught without propagating.
     */
    @Test
    public void testConnectionErrorHandling() {
        // Log start of error handling test
        System.out.println("Starting testConnectionErrorHandling test");
        System.out.println("Current time: " + getCurrentFormattedDateTime());
        System.out.println("Current User's Login: " + testUser.getUsername());

        // Log current PrintWriter instance
        System.out.println("Original PrintWriter instance: " + client.getOut());

        // Create a PrintWriter that throws an exception on println
        System.out.println("Creating failing PrintWriter that will throw a RuntimeException");
        PrintWriter failingWriter = new PrintWriter(outputWriter) {
            @Override
            public void println(String x) {
                System.out.println("Failing PrintWriter.println() called with: " + x);
                System.out.println("About to throw simulated network error");
                throw new RuntimeException("Simulated network error");
            }
        };

        // Set failing writer on client
        System.out.println("Setting failing PrintWriter on Client");
        client.setOut(failingWriter);

        // Create a test message
        TextMessage message = new TextMessage(testChat, testUser, "Hello, world!");
        System.out.println("Test message created with:");
        System.out.println("  User ID: " + testUser.getId());
        System.out.println("  Chat ID: " + testChat.getId());
        System.out.println("  Content: Hello, world!");

        // Log expected error behavior
        System.out.println("About to send message using failing writer...");
        System.out.println("(Expect to see error message from Client's exception handler)");

        // Test that exception is handled internally
        System.out.println("Testing that exception is caught and doesn't propagate out of send()");
        try {
            client.send(message);
            System.out.println("✓ Success: No exception was thrown from send() method");
        } catch (Exception e) {
            System.out.println("✗ Failure: Exception escaped from send() method: " + e);
            throw e;
        }

        // Log test completion
        System.out.println("Test completed successfully - Client properly handled the error");
        System.out.println("(The 'Error sending message: Simulated network error' above comes from Client's error handler)");
        System.out.println("------------------------------------------------------");
    }

    /**
     * Verifies that the client correctly handles null message scenarios
     * without throwing unexpected exceptions.
     */
    @Test
    public void testNullMessageHandling() {
        // Log start of null message handling test
        System.out.println("Starting testNullMessageHandling test");
        System.out.println("Current time: " + getCurrentFormattedDateTime());
        System.out.println("Current User's Login: " + testUser.getUsername());

        // Test sending null message
        System.out.println("Testing send(null) handling...");
        assertDoesNotThrow(() -> client.send(null), "Client should handle null messages gracefully");

        // Reset output writer
        outputWriter.getBuffer().setLength(0);

        // Test message with null content
        System.out.println("Testing message with null content...");
        TextMessage nullContentMsg = new TextMessage(testChat, testUser, null);
        assertDoesNotThrow(() -> client.send(nullContentMsg), "Client should handle null message content gracefully");

        // Capture and log output for null content message
        String nullContentOutput = outputWriter.toString().trim();
        System.out.println("Captured output for null content message:");
        System.out.println("-----------------------------------");
        System.out.println(nullContentOutput);
        System.out.println("-----------------------------------");

        // Reset output writer
        outputWriter.getBuffer().setLength(0);

        // Test message with null chat
        System.out.println("Testing message with null chat...");
        TextMessage nullChatMsg = new TextMessage(null, testUser, "Test content");
        assertDoesNotThrow(() -> client.send(nullChatMsg), "Client should handle null chat gracefully");

        // Capture and log output for null chat message
        String nullChatOutput = outputWriter.toString().trim();
        System.out.println("Captured output for null chat message:");
        System.out.println("-----------------------------------");
        System.out.println(nullChatOutput);
        System.out.println("-----------------------------------");

        // Log test completion
        System.out.println("testNullMessageHandling test completed successfully");
    }

    /**
     * Verifies that all client resources are correctly cleaned up
     * when disconnect is triggered.
     */
    @Test
    public void testResourceCleanupOnDisconnect() {
        // Log start of resource cleanup test
        System.out.println("Starting testResourceCleanupOnDisconnect test");
        System.out.println("Current time: " + getCurrentFormattedDateTime());

        // Inner class to track resource cleanup actions
        class DisconnectTestClient extends TestClient {
            private boolean socketClosed = false;
            private boolean writerClosed = false;
            private boolean readerClosed = false;

            public DisconnectTestClient(String host) {
                super(host);
            }

            @Override
            public void disconnect() {
                System.out.println("DisconnectTestClient disconnect called");
                super.disconnect();
                socketClosed = true;
                writerClosed = true;
                readerClosed = true;
            }

            public boolean isSocketClosed() {
                return socketClosed;
            }

            public boolean isWriterClosed() {
                return writerClosed;
            }

            public boolean isReaderClosed() {
                return readerClosed;
            }
        }

        // Create test client instance for resource cleanup test
        DisconnectTestClient disconnectClient = new DisconnectTestClient("localhost");

        // Assign dummy resources
        StringWriter stringWriter = new StringWriter();
        PrintWriter testWriter = new PrintWriter(stringWriter);
        disconnectClient.setOut(testWriter);
        Socket testSocket = new Socket();
        disconnectClient.setSocket(testSocket);
        BufferedReader testReader = new BufferedReader(new StringReader(""));
        disconnectClient.setIn(testReader);

        // Log resource setup
        System.out.println("Setting up test client resources");

        // Trigger disconnect
        System.out.println("Calling disconnect on test client");
        disconnectClient.disconnect();

        // Verify resource cleanup flags
        System.out.println("Verifying resources were cleaned up");
        assertTrue(disconnectClient.isSocketClosed(), "Socket should be closed after disconnect");
        assertTrue(disconnectClient.isWriterClosed(), "Writer should be closed after disconnect");
        assertTrue(disconnectClient.isReaderClosed(), "Reader should be closed after disconnect");

        // Log test completion
        System.out.println("testResourceCleanupOnDisconnect test completed successfully");
    }

    /**
     * Returns the current date and time formatted as yyyy-MM-dd HH:mm:ss.
     *
     * @return Formatted date and time string.
     */
    private String getCurrentFormattedDateTime() {
        return LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
    }

    /**
     * Specialized test subclass of Client used for testing
     * without establishing actual server connections.
     */
    private static class TestClient extends Client {
        private PrintWriter out;
        private BufferedReader in;
        private Socket socket;

        public TestClient(String host) {
            super(host);
        }

        @Override
        protected void connectToServer() {
            // Override to disable actual server connection during tests
        }

        @Override
        protected String promptForCredentials() {
            // Return predefined test username
            return "TestUser";
        }

        @Override
        public void start() {
            // Override to avoid starting real ClientHandler thread
            User user = new User("TestUser");
            UserUpdateMessage message = new UserUpdateMessage(user, UserStatus.ONLINE);
            send(message);
        }

        @Override
        public void setOut(PrintWriter writer) {
            this.out = writer;
            super.setOut(writer);
        }

        @Override
        public void setIn(BufferedReader reader) {
            this.in = reader;
            super.setIn(reader);
        }

        public void setSocket(Socket socket) {
            this.socket = socket;
        }

        public PrintWriter getOut() {
            return out;
        }

        public BufferedReader getIn() {
            return in;
        }

        public Socket getSocket() {
            return socket;
        }

        @Override
        public void disconnect() {
            // Simulate resource cleanup during test disconnection
            System.out.println("TestClient: simulating disconnection and resource cleanup");
        }
    }
}
